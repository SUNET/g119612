//The etsi119612 package implements ETSI 119 612 trust status list. The package is
//primarily meant to be used to create a CertPool for [crypto/x509] Certificate
//validation. The package provides some small number of utilities for introspecting
//trust status lists.

package etsi119612

import (
	"bytes"
	"context"
	"crypto/x509"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"

	log "github.com/sirupsen/logrus"

	"strings"

	"github.com/moov-io/signedxml"
)

// A representation of an ETSI 119 612 trust status list. The main struct type StatusList
// is autogenerated from the v2 XML Schema definition.
type TSL struct {
	StatusList TrustStatusListType `xml:"tsl:TrustServiceStatusList"`
	Source     string
	Signed     bool
	Signer     x509.Certificate
	Referenced []*TSL
}

func (tsl *TSL) NumberOfTrustServiceProviders() int {
	if tsl == nil || tsl.StatusList.TslTrustServiceProviderList == nil {
		return 0
	}
	return len(tsl.StatusList.TslTrustServiceProviderList.TslTrustServiceProvider)
}

func (tsl *TSL) SchemeOperatorName() string {
	if tsl == nil || tsl.StatusList.TslSchemeInformation == nil {
		return "Unknown scheme operator"
	}
	return FindByLanguage(tsl.StatusList.TslSchemeInformation.TslSchemeOperatorName, "en", "Unknown scheme operator")
}

func (tsl *TSL) String() string {
	if tsl == nil {
		return "<nil TSL>"
	}
	return fmt.Sprintf("TSL[Source: %s] by %s with %d trust service providers", tsl.Source, tsl.SchemeOperatorName(), tsl.NumberOfTrustServiceProviders())
}

// CleanCerts trims whitespace from all certificates in the TSL.
func (tsl *TSL) CleanCerts() {
	tsl.WithTrustServices(func(tsp *TSPType, svc *TSPServiceType) {
		if svc.TslServiceInformation != nil && svc.TslServiceInformation.TslServiceDigitalIdentity != nil {
			for i := range svc.TslServiceInformation.TslServiceDigitalIdentity.DigitalId {
				cert := svc.TslServiceInformation.TslServiceDigitalIdentity.DigitalId[i].X509Certificate
				svc.TslServiceInformation.TslServiceDigitalIdentity.DigitalId[i].X509Certificate = strings.TrimSpace(cert)
			}
		}
	})
}

// TSLFetchOptions defines configurable options for fetching Trust Service Lists.
// It allows controlling HTTP request parameters like User-Agent and timeout.
//
// The options provide control over:
//   - The User-Agent header sent with HTTP requests
//   - The timeout for HTTP connections and requests
//   - Using a custom HTTP client for more advanced configuration
//
// For most cases, the DefaultTSLFetchOptions provide reasonable settings.
type TSLFetchOptions struct {
	// UserAgent is the User-Agent header to use for HTTP requests.
	// A descriptive User-Agent helps server administrators identify client applications
	// and can prevent blocking of requests that don't identify themselves.
	UserAgent string

	// Timeout is the maximum time to wait for an HTTP request to complete.
	// This helps prevent applications from hanging indefinitely when servers are
	// unresponsive or connections are slow.
	Timeout time.Duration

	// Client is a custom HTTP client to use instead of the default one.
	// If provided, the Timeout option is ignored as the client should be
	// configured with the desired timeout and other settings.
	// Use this for advanced scenarios like custom TLS configuration or proxies.
	Client *http.Client
}

// DefaultTSLFetchOptions provides reasonable default options for fetching TSLs
var DefaultTSLFetchOptions = TSLFetchOptions{
	UserAgent: "Go-Trust/1.0 TSL Fetcher (+https://github.com/SUNET/go-trust)",
	Timeout:   30 * time.Second,
}

// FetchTSL creates a TSL object from a URL. The URL is fetched with [net/http], parsed and unmarshalled
// into the object structure. This function uses DefaultTSLFetchOptions and automatically dereferences
// pointers to other TSLs.
//
// For more control over HTTP parameters and dereferencing behavior, use FetchTSLWithOptions.
func FetchTSL(url string) (*TSL, error) {
	return FetchTSLWithReferencesAndOptions(url, DefaultTSLFetchOptions)
}

// FetchTSLWithOptions creates a TSL object from a URL with custom fetch options.
// The URL is fetched with [net/http] using the provided options, parsed and unmarshalled
// into the object structure.
//
// Unlike FetchTSL, this function does not automatically dereference pointers to other TSLs.
// To fetch a TSL and all its referenced TSLs with the same options, use FetchTSLWithReferencesAndOptions.
//
// Parameters:
//   - url: The URL to fetch the TSL from (supports file:// URLs for local files)
//   - options: Options controlling HTTP request parameters
//
// Returns:
//   - A pointer to the fetched and parsed TSL
//   - Any error that occurred during fetching or parsing
func FetchTSLWithOptions(url string, options TSLFetchOptions) (*TSL, error) {
	var bodyBytes []byte
	var err error
	if strings.HasPrefix(url, "file://") {
		path := strings.TrimPrefix(url, "file://")
		bodyBytes, err = os.ReadFile(path)
		if err != nil {
			return nil, err
		}
	} else {
		// Create an HTTP client with the specified timeout
		client := options.Client
		if client == nil {
			client = &http.Client{
				Timeout: options.Timeout,
			}
		}
		
		// Create request with context
		ctx, cancel := context.WithTimeout(context.Background(), options.Timeout)
		defer cancel()
		
		req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
		if err != nil {
			return nil, err
		}
		
		// Set User-Agent header
		req.Header.Set("User-Agent", options.UserAgent)
		
		// Execute request
		resp, err := client.Do(req)
		if err != nil {
			return nil, err
		}
		defer resp.Body.Close()
		
		// Check response status
		if resp.StatusCode != http.StatusOK {
			return nil, fmt.Errorf("unexpected HTTP status: %s", resp.Status)
		}
		
		bodyBytes, err = io.ReadAll(resp.Body)
		if err != nil {
			return nil, err
		}
	}
	t := TSL{Source: url, StatusList: TrustStatusListType{}}
	log.Debugf("g119612: Fetched %d bytes from %s\n", len(bodyBytes), url)

	if bytes.Contains(bodyBytes, []byte("Signature>")) {
		t.Signed = true
		// lets try to validate a signature if we can
		validator, err := signedxml.NewValidator(string(bodyBytes))
		if err == nil {
			validator.SetReferenceIDAttribute("Id")
			xml, err := validator.ValidateReferences()
			if err == nil {
				bodyBytes = []byte(xml[0])
				t.Signer = validator.SigningCert()
			} else {
				return nil, err
			}
		} else {
			return nil, err
		}
	}

	err = xml.Unmarshal(bodyBytes, &t.StatusList)
	if err != nil {
		return nil, err
	}

	t.CleanCerts()
	
	// Don't automatically dereference pointers here - that will be done by the caller if needed
	
	log.Infof("g119612: Parsed TSL from %s with %d trust service providers\n", url, t.NumberOfTrustServiceProviders())

	return &t, nil
}

func (tsl *TSL) AddReferencedTSL(ref *TSL) {
	if tsl.Referenced == nil {
		tsl.Referenced = []*TSL{}
	}
	tsl.Referenced = append(tsl.Referenced, ref)
}

// FetchTSLWithReferencesAndOptions fetches a TSL and all its referenced TSLs with the specified options.
// This is a convenience function that combines FetchTSLWithOptions and dereferencePointersToOtherTSLWithOptions.
//
// Parameters:
//   - url: The URL to fetch the TSL from
//   - options: Options controlling HTTP request parameters
//
// Returns:
//   - A pointer to the fetched TSL with all referenced TSLs loaded
//   - Any error that occurred during fetching or parsing
func FetchTSLWithReferencesAndOptions(url string, options TSLFetchOptions) (*TSL, error) {
	tsl, err := FetchTSLWithOptions(url, options)
	if err != nil {
		return nil, err
	}
	
	// Dereference pointers with the same options
	tsl.dereferencePointersToOtherTSLWithOptions(options)
	return tsl, nil
}

// DereferencePointersToOtherTSL fetches and adds all referenced TSLs using default options.
// This examines the TSL for pointers to other TSLs (TslPointersToOtherTSL) and fetches each
// of them using the default fetch options.
func (tsl *TSL) DereferencePointersToOtherTSL() {
	tsl.dereferencePointersToOtherTSLWithOptions(DefaultTSLFetchOptions)
}

// dereferencePointersToOtherTSLWithOptions fetches and adds referenced TSLs using the provided fetch options.
//
// This method examines the TSL for pointers to other TSLs (TslPointersToOtherTSL) and fetches each
// of them using the specified options. Successfully fetched TSLs are added to the Referenced list.
// Failures to fetch referenced TSLs are logged but do not cause this method to return an error.
//
// Parameters:
//   - options: The options to use when fetching referenced TSLs
func (tsl *TSL) dereferencePointersToOtherTSLWithOptions(options TSLFetchOptions) {
	if tsl.StatusList.TslSchemeInformation == nil || tsl.StatusList.TslSchemeInformation.TslPointersToOtherTSL == nil {
		return
	}
	for _, p := range tsl.StatusList.TslSchemeInformation.TslPointersToOtherTSL.TslOtherTSLPointer {
		refTsl, err := FetchTSLWithOptions(p.TSLLocation, options)
		if err == nil {
			tsl.AddReferencedTSL(refTsl)
		} else {
			log.Warnf("g119612: Failed to fetch referenced TSL %s: %v", p.TSLLocation, err)
		}
	}
}

// WithTrustServices walks a TSL, calling cb once for each TrustService found. The TrustServiceProvider is provided as a first
// argument to the callback
func (tsl *TSL) WithTrustServices(cb func(*TSPType, *TSPServiceType)) {
	if tsl.StatusList.TslTrustServiceProviderList == nil {
		return
	}
	for _, tsp := range tsl.StatusList.TslTrustServiceProviderList.TslTrustServiceProvider {
		if tsp != nil && tsp.TslTSPServices != nil {
			for _, svc := range tsp.TslTSPServices.TslTSPService {
				cb(tsp, svc)
			}
		}
	}
}

// Generate a [crypto/xml.CertPool] object from the TSL.
func (tsl *TSL) ToCertPool(policy *TSPServicePolicy) *x509.CertPool {
	pool := x509.NewCertPool()
	tsl.WithTrustServices(func(tsp *TSPType, svc *TSPServiceType) {
		svc.WithCertificates(func(cert *x509.Certificate) {
			// Only add cert if policy is satisfied
			if tsp.Validate(svc, []*x509.Certificate{cert}, policy) == nil {
				pool.AddCert(cert)
			}
		})
	})
	return pool
}
