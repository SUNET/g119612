//The etsi119612 package implements ETSI 119 612 trust status list. The package is
//primarily meant to be used to create a CertPool for [crypto/x509] Certificate
//validation. The package provides some small number of utilities for introspecting
//trust status lists.

package etsi119612

import (
	"bytes"
	"crypto/x509"
	"encoding/xml"
	"io"
	"log"
	"net/http"

	"github.com/moov-io/signedxml"
)

// A representation of an ETSI 119 612 trust status list. The main struct type StatusList
// is autogenerated from the v2 XML Schema definition.
type TSL struct {
	StatusList TrustStatusListType `xml:"tsl:TrustServiceStatusList"`
	Source     string
	Signed     bool
	Signer     x509.Certificate
}

// Create a TSL object from a URL. The URL is fetched with [net/http], parsed and unmarshalled
// into the object structure.
func FetchTSL(url string) (*TSL, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	t := TSL{Source: url, StatusList: TrustStatusListType{}}
	log.Printf("g119612: Fetched %d bytes from %s\n", len(bodyBytes), url)

	if bytes.Contains(bodyBytes, []byte("Signature>")) {
		t.Signed = true
		// lets try to validate a signature if we can
		validator, err := signedxml.NewValidator(string(bodyBytes))
		if err == nil {
			validator.SetReferenceIDAttribute("Id")
			xml, err := validator.ValidateReferences()
			if err == nil {
				bodyBytes = []byte(xml[0])
				t.Signer = validator.SigningCert()
			} else {
				return nil, err
			}
		} else {
			return nil, err
		}
	}

	err = xml.Unmarshal(bodyBytes, &t.StatusList)
	if err != nil {
		return nil, err
	}

	return &t, nil
}

// Walk a TSL, calling cb once for each TrustService found. The TrustServiceProvider is provided as a first
// argument to the callback
func (tsl *TSL) withTrustServices(cb func(*TSPType, *TSPServiceType)) {
	for _, tsp := range tsl.StatusList.TslTrustServiceProviderList.TslTrustServiceProvider {
		if tsp != nil {
			for _, svc := range tsp.TslTSPServices.TslTSPService {
				cb(tsp, svc)
			}
		}
	}
}

// Generate a [crypto/xml.CertPool] object from the TSL.
func (tsl *TSL) ToCertPool(policy *TSPServicePolicy) *x509.CertPool {
	pool := x509.NewCertPool()
	tsl.withTrustServices(func(tsp *TSPType, svc *TSPServiceType) {
		svc.withCertificates(func(cert *x509.Certificate) {
			pool.AddCertWithConstraint(cert, func(chain []*x509.Certificate) error {
				return tsp.Validate(svc, chain, policy)
			})
		})
	})
	return pool
}
